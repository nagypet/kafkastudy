#docker compose for the kafkastudy project

version: '3.6'

networks:
    back-tier-net:
        driver: bridge
    monitoring:
        driver: bridge

services:

    #####################################################################################                 
    zookeeper:
    #####################################################################################                 
        container_name: kafkastudy-zookeper
        image: wurstmeister/zookeeper
        ports:
            - "2181:2181"
        networks: 
            - back-tier-net
        hostname: zookeeper
            
            
    #####################################################################################                 
    kafka:
    #####################################################################################                 
        container_name: kafkastudy-kafka
        image: wurstmeister/kafka:latest
        environment:
            #HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
            #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            #KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
            #KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
            #KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            # Put 127.0.0.1 kafka into your hosts file
            KAFKA_ADVERTISED_HOST_NAME: kafka
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ports:
            - "9092:9092"
            #- target: 9094
            #  published: 9094
            #  protocol: tcp
            #  mode: host
        volumes:
            - kafka:/var/run/docker.sock
        networks: 
            - back-tier-net
        hostname: kafka


    #####################################################################################                 
    eventlog-service:
    #####################################################################################                 
        container_name: kafkastudy-eventlog-service
        image: kafkastudy-eventlog-service
        environment:
              - JAVA_OPTS=
              #- WEBSERVICE_OPTS=-Dspring.profiles.active=dev-docker,dev-docker-sqlserver -Dserver.fqdn=webservice.wsstepbystep.perit.hu -Dserver.port=8400 
        ports:
            - "8400:8400"
        networks: 
            - back-tier-net
            - monitoring
        hostname: 'eventlog-service'


    #####################################################################################                 
    prometheus:
    #####################################################################################                 
        container_name: kafkastudy-prometheus
        image: kafkastudy-prometheus
        volumes:
            - prometheus:/prometheus
        command: 
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
        ports:
            - '9090:9090'
        networks: 
            - back-tier-net
            - monitoring
        labels:
            hu.perit.template.cluster: "monitoring"
        hostname: prometheus


    #####################################################################################                 
    nodeexporter:
    #####################################################################################                 
        image: prom/node-exporter:v0.18.1
        container_name: kafkastudy-nodeexporter
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
        restart: unless-stopped
        ports:
            - '9100:9100'
        networks: 
            - monitoring
        hostname: nodeexporter
        labels:
            hu.perit.template.cluster: "monitoring"


    #####################################################################################                 
    cadvisor:
    #####################################################################################                 
        image: gcr.io/google-containers/cadvisor:v0.36.0
        container_name: kafkastudy-cadvisor
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker:/var/lib/docker:ro
            - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
        restart: unless-stopped
        ports:
            - '8080:8080'
        networks: 
            - monitoring
        hostname: cadvisor
        labels:
            hu.perit.template.cluster: "monitoring"


    #####################################################################################                 
    grafana:
    #####################################################################################                 
        container_name: kafkastudy-grafana
        image: kafkastudy-grafana
        volumes:
            - grafana:/var/lib/grafana
        ports:
            - '3000:3000'
        networks: 
            - monitoring
        hostname: grafana
        depends_on:
            - prometheus
        labels:
            hu.perit.template.cluster: "monitoring"

volumes:
    kafka:
    prometheus:
    grafana:
